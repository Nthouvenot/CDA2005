// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TpFreelancer.Data;

namespace TpFreelancer.Migrations
{
    [DbContext(typeof(TpFreelancerContext))]
    partial class TpFreelancerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("TpFreelancer.Models.CustomerCatsModel", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cats_id")
                        .UseIdentityColumn();

                    b.Property<string>("CatDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cat_description");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cat_name");

                    b.Property<int?>("CustomerCatsModelCatId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("CatName")
                        .IsUnique();

                    b.HasIndex("CustomerCatsModelCatId");

                    b.ToTable("customers_cats");
                });

            modelBuilder.Entity("TpFreelancer.Models.CustomersModel", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id")
                        .UseIdentityColumn();

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customer_name");

                    b.Property<DateTime>("CustomerRegistraitionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("customer_registration_date");

                    b.Property<int?>("CustomersCatsCatId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomersCatsCatId");

                    b.HasIndex("CustomerName", "CustomerEmail")
                        .IsUnique()
                        .HasFilter("[customer_name] IS NOT NULL");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("TpFreelancer.Models.JobsModel", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_id")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("CustomersModelCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("job_description");

                    b.Property<DateTime>("JobEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("job_end");

                    b.Property<DateTime>("JobStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("job_start");

                    b.Property<string>("JobState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("job_state");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title");

                    b.HasKey("JobId");

                    b.HasIndex("CustomersModelCustomerId");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("TpFreelancer.Models.QuotesModel", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quote_id")
                        .UseIdentityColumn();

                    b.Property<int>("Jobid")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int?>("JobsModelJobId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteAmount")
                        .HasColumnType("int")
                        .HasColumnName("quote_amount");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("quote_date");

                    b.Property<int>("QuoteFinalAmount")
                        .HasColumnType("int")
                        .HasColumnName("quote_final_amount");

                    b.Property<DateTime>("QuoteFinalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("quote_final_date");

                    b.Property<string>("QuoteState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("quote_state");

                    b.HasKey("QuoteId");

                    b.HasIndex("JobsModelJobId");

                    b.ToTable("QuotesModels");
                });

            modelBuilder.Entity("TpFreelancer.Models.CustomerCatsModel", b =>
                {
                    b.HasOne("TpFreelancer.Models.CustomerCatsModel", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerCatsModelCatId");
                });

            modelBuilder.Entity("TpFreelancer.Models.CustomersModel", b =>
                {
                    b.HasOne("TpFreelancer.Models.CustomerCatsModel", "CustomersCats")
                        .WithMany()
                        .HasForeignKey("CustomersCatsCatId");

                    b.Navigation("CustomersCats");
                });

            modelBuilder.Entity("TpFreelancer.Models.JobsModel", b =>
                {
                    b.HasOne("TpFreelancer.Models.CustomersModel", "CustomersModel")
                        .WithMany("JobsModels")
                        .HasForeignKey("CustomersModelCustomerId");

                    b.Navigation("CustomersModel");
                });

            modelBuilder.Entity("TpFreelancer.Models.QuotesModel", b =>
                {
                    b.HasOne("TpFreelancer.Models.JobsModel", "JobsModel")
                        .WithMany()
                        .HasForeignKey("JobsModelJobId");

                    b.Navigation("JobsModel");
                });

            modelBuilder.Entity("TpFreelancer.Models.CustomerCatsModel", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("TpFreelancer.Models.CustomersModel", b =>
                {
                    b.Navigation("JobsModels");
                });
#pragma warning restore 612, 618
        }
    }
}
